#!/usr/bin/env python3
"""
Fetch current shares outstanding for each tracked ticker
and regenerate t2d_pulse_export/data/shares.json

Usage:
    python t2d_pulse_export/maintenance/refresh_shares_json.py
"""

from __future__ import annotations

import json, os, time, requests, pathlib, sys
from typing import Dict, List, Optional

FINNHUB_KEY = os.getenv("FINNHUB_API_KEY")
if not FINNHUB_KEY:
    sys.exit("❌  FINNHUB_API_KEY not set")

# ----------------------------------------------------------------------
# 1) Where to save the JSON
JSON_PATH = pathlib.Path("t2d_pulse_export/data/shares.json")

# 2) Where to read the tickers
TICKER_FILE = pathlib.Path("t2d_pulse_export/data/tickers.txt")
if not TICKER_FILE.exists():
    sys.exit("❌  ticker list missing → t2d_pulse_export/data/tickers.txt")

TICKERS: List[str] = [t.strip().upper() for t in TICKER_FILE.read_text().splitlines() if t.strip()]
if not TICKERS:
    sys.exit("❌  ticker list was empty")

# ----------------------------------------------------------------------
def fetch_shares_finnhub(ticker: str) -> Optional[int]:
    """Return shares outstanding in **millions**, rounded, or None if not found."""
    url = "https://finnhub.io/api/v1/stock/metric"
    params = {"symbol": ticker, "metric": "company", "token": FINNHUB_KEY}
    try:
        r = requests.get(url, params=params, timeout=10)
        r.raise_for_status()
        shares = r.json()["metric"].get("sharesOutstanding")
        if shares:
            return round(shares / 1_000_000)  # keep same unit as legacy file
    except (requests.RequestException, ValueError, KeyError):
        pass
    return None

def main() -> None:
    new_data: Dict[str, int] = {}
    missing: List[str] = []

    for i, tkr in enumerate(TICKERS, 1):
        so = fetch_shares_finnhub(tkr)
        if so is None:
            missing.append(tkr)
        else:
            new_data[tkr] = so

        # Finnhub free tier → 60 calls/min → small sleep
        time.sleep(0.25)

        # tiny heartbeat in CI logs
        if i % 20 == 0:
            print(f"…{i}/{len(TICKERS)} tickers fetched")

    if missing:
        raise RuntimeError(
            f"Did not get share counts for: {', '.join(missing)}"
        )

    # write prettified JSON
    JSON_PATH.parent.mkdir(parents=True, exist_ok=True)
    JSON_PATH.write_text(json.dumps(new_data, indent=2))
    print(f"✅  Wrote {len(new_data)} tickers to {JSON_PATH}")

if __name__ == "__main__":
    main()
